import cv2
from typing import List, Union
from .ocr import perform_ocr
from .ai_processing import process_with_ai
from .preprocessing import preprocess_image
from .utils import ai2norm, norm2ai, merge_box_groups, assign_ids_to_bounds, cv2pil
from ..config import GOOGLE_AI_API_KEY
from ..utils.rate_limiter import rate_limiter
import time

AVAILABLE_OCR = ["easyocr", "ocrspace", "rapidocr"]


def extract(
        image: Union[str], ocr: Union[str, List[str]] = "easyocr"
):
    """
    Tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ ·∫£nh ƒë√£ cho b·∫±ng c√°ch s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p OCR ƒë√£ ch·ªâ ƒë·ªãnh v√† x·ª≠ l√Ω v·ªõi AI.

    Args:
        image (str or numpy.ndarray): ƒê∆∞·ªùng d·∫´n ƒë·∫øn t·ªáp ·∫£nh ho·∫∑c m·∫£ng numpy c·ªßa ·∫£nh.
        ocr (str or list): Ph∆∞∆°ng ph√°p OCR ƒë·ªÉ s·ª≠ d·ª•ng. C√≥ th·ªÉ l√† "easyocr", "ocrspace", ho·∫∑c m·ªôt danh s√°ch ch·ª©a c·∫£ hai.

    Returns:
        dict: D·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω ch·ª©a c√°c vƒÉn b·∫£n ƒë√£ tr√≠ch xu·∫•t v√† v·ªã tr√≠ c·ªßa ch√∫ng.
    """

    if GOOGLE_AI_API_KEY is None:
        raise ValueError("GOOGLE_AI_API_KEY ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t")

    if isinstance(image, str):
        image = cv2.imread(image)
    processed_image = preprocess_image(image)
    height, width = processed_image.shape[:2]

    if isinstance(ocr, str):
        ocr = [ocr]
    ocr = list(filter(lambda x: x in AVAILABLE_OCR, ocr))

    if len(ocr) == 0:
        raise ValueError(
            f"Ph∆∞∆°ng ph√°p OCR ƒë√£ cung c·∫•p kh√¥ng h·ª£p l·ªá, C√°c ph∆∞∆°ng ph√°p OCR c√≥ s·∫µn:{AVAILABLE_OCR}"
        )

    time_start = time.time()
    ocr_results = perform_ocr(processed_image, ocr)
    time_end = time.time()
    print(f"Th·ªùi gian x·ª≠ l√Ω OCR: {time_end - time_start} gi√¢y")

    if len(ocr_results) == 0:
        raise ValueError("Kh√¥ng t√¨m th·∫•y vƒÉn b·∫£n trong ·∫£nh.")

    ocr_results = norm2ai(ocr_results, height, width)
    ocr_bound_ids = assign_ids_to_bounds(ocr_results)

    # Hi·ªÉn th·ªã th√¥ng tin rate limit tr∆∞·ªõc khi g·ªçi AI
    remaining_ocr = rate_limiter.get_remaining_requests("gemini-2.0-flash")
    print(f"ü§ñ OCR AI requests remaining: {remaining_ocr}/1000")

    predicted_groups = process_with_ai(
        cv2pil(processed_image), ocr_bound_ids, GOOGLE_AI_API_KEY)

    results = merge_box_groups(predicted_groups, ocr_bound_ids)
    final_results = ai2norm(results, height, width)

    return final_results
